#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Writing code the Pythonic way
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.3)
#+STARTUP: indent

#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil reveal_single_file:nil
#+OPTIONS: reveal_slide_number:"c" reveal_title_slide:"%t" reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: .
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: solarized
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL:1
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT: zoomKey: 'shift'
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css

#+BEGIN_NOTES
Notes from Raymond Hettinger's talk at pycon US 2013 [[https://www.youtube.com/watch?v=OSGv2VnC0go][video]] [[https://speakerdeck.com/pyconslides/transforming-code-into-beautiful-idiomatic-python-by-raymond-hettinger-1][slides]]

This is based on a transcript of Raymond's talk by Jeff Paine. I've updated
it to purely Python 3 and added notes about Python 2 where necessary. It's
also written in org-mode which means you could actually run the code here.

It's also designed to be easily exported as a slideshow with [[https://github.com/yjwen/org-reveal/][ox-reveal]].
#+END_NOTES

* Looping over a range of numbers
#+BEGIN_SRC python :results output :exports both :cache yes
  for i in range(6):
      print(i**2)
#+END_SRC

#+RESULTS[d97253be7d418f2cbdc831381aa7843724b132d7]:
: 0
: 1
: 4
: 9
: 16
: 25

** Python 2 note
In Python 2 the ~range~ function constructs a real list in memory and returns
it. In Python 3 ~range~ creates an iterator which produces the values one at a
time which is quicker and saves memory. The old is achieved with
~list(range(n))~ in Python 3.

In Python 2 the ~xrange~ function exists to create an iterator instead of a
list and is equivalent to ~range~ in Python 3.

* Looping over a collection
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'blue', 'yellow']
  for i in range(len(colors)):
      print(colors[i])
#+END_SRC

#+RESULTS[ab7b1a1a1e133338fcf9b877179e6d80d9ea3f64]:
: red
: green
: blue
: yellow

** Better
#+BEGIN_SRC python :results output
  colors = ['red', 'green', 'blue', 'yellow']
  for color in colors:
      print(color)
#+END_SRC

* Looping backwards
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'blue', 'yellow']
  for i in range(len(colors)-1, -1, -1):
      print(colors[i])
#+END_SRC

#+RESULTS[35459c5837b625d6014dcec0d3f0f4a4755761b2]:
: yellow
: blue
: green
: red

** Better
#+BEGIN_SRC python :results output
  colors = ['red', 'green', 'blue', 'yellow']
  for color in reversed(colors):
      print(color)
#+END_SRC

* Looping over a collection and indices
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'blue', 'yellow']
  for i in range(len(colors)):
      print(i, '--->', colors[i])
#+END_SRC

#+RESULTS[79f8b0ce8a5524f9efcd7452c04620daf5de558f]:
: 0 ---> red
: 1 ---> green
: 2 ---> blue
: 3 ---> yellow

** Better
#+BEGIN_SRC python :results output
  colors = ['red', 'green', 'blue', 'yellow']
  for i, color in enumerate(colors):
      print(i, '--->', color)
#+END_SRC

#+BEGIN_QUOTE
It's fast and beautiful and saves you from tracking the individual indices and
incrementing them.
#+END_QUOTE
#+BEGIN_QUOTE
Whenever you find yourself manipulating indices [in a collection], you're
probably doing it wrong.
#+END_QUOTE

* Looping over two collections
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew']
  colors = ['red', 'green', 'blue', 'yellow']

  n = min(len(names), len(colors))
  for i in range(n):
      print(names[i], '--->', colors[i])
#+END_SRC

#+RESULTS[c662442b8db17d5223202aecccc16140900b2b51]:
: raymond ---> red
: rachel ---> green
: matthew ---> blue

** Better
#+BEGIN_SRC python :results output
  names = ['raymond', 'rachel', 'matthew']
  colors = ['red', 'green', 'blue', 'yellow']

  for name, color in zip(names, colors):
      print(name, '--->', color)
#+END_SRC

** Python 2 note
In Python 2, ~zip~ creates a new list in memory. ~izip~ instead creates an
iterator which is more efficient and equivalent to ~zip~ in Python 3.

* Looping in sorted order
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'blue', 'yellow']

  print("Forward sorted order:")
  for color in sorted(colors):
      print(color)

  print("Backwards sorted order:")
  for color in sorted(colors, reverse=True):
      print(color)

  print("With custom order:")
  for color in sorted(colors, key=len):
      print(color)
#+END_SRC

#+RESULTS[1d5ed17333b9075fa593f8e6768d138e23fc9018]:
#+begin_example
Forward sorted order:
blue
green
red
yellow
Backwards sorted order:
yellow
red
green
blue
With custom order:
red
blue
green
yellow
#+end_example

** Python 2 note
In Python 2 the ~sorted~ function had an additional parameter, ~cmp~, which
took a comparison function as an alternative way to define a custom sorting
order. This was removed in Python 3 as the ~key~ parameter is more beautiful
and faster.

* Call a function until a sentinel value
#+BEGIN_SRC python :results output :exports both :cache yes
  import io
  buf = io.StringIO("string")
  chars = []
  while True:
      char = buf.read(1)
      if char == "":
          break
      chars.append(char)
  print(chars)
#+END_SRC

#+RESULTS[3ffb0a854886174655f84ee6d8746f44f2d16368]:
: ['s', 't', 'r', 'i', 'n', 'g']

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  import io
  from functools import partial
  buf = io.StringIO("string")
  chars = []
  for char in iter(partial(buf.read, 1), ""):
      chars.append(char)
  print(chars)
#+END_SRC

#+RESULTS[2068c824057938d8eaf48754db8fd83036ae9945]:
: ['s', 't', 'r', 'i', 'n', 'g']

#+BEGIN_NOTES
~iter~ takes two arguments. The first you call over and over again and the
second is a sentinel value which, when encountered, terminates the iteration.
#+END_NOTES

* Distinguishing multiple exit points in loops
#+BEGIN_SRC python :results output :exports both :cache yes
  def find(seq, target):
      found = False
      for i, value in enumerate(seq):
          if value == target:
              found = True
              break
      if not found:
          return -1
      return i

  seq = [1,3,4]
  print(find(seq, 3))
  print(find(seq, 2))
#+END_SRC

#+RESULTS[17a1b97e45e74f36e9c478b4a9d2b09fd85fbc79]:
: 1
: -1

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  def find(seq, target):
      for i, value in enumerate(seq):
          if value == target:
              break
      else:
          return -1
      return i

  seq = [1,3,4]
  print(find(seq, 3))
  print(find(seq, 2))
#+END_SRC

#+RESULTS[b609ce17bec09921a46f3968a6c10ea18558a722]:
: 1
: -1

#+BEGIN_NOTES
In Python, ~for~ and ~while~ loops have an ~else~ which is executed when the
iteration naturally comes to and end (not after a ~break~).
#+END_NOTES

* Looping over dictionary keys
#+BEGIN_SRC python :results output :exports both :cache yes
  d = {'matthew': 'blue', 'rachel': 'green', 'raymond': 'red'}

  for k in d:
      print(k)

  for k in list(d.keys()):
      if k.startswith('r'):
          del d[k]

  print(d)
#+END_SRC

#+RESULTS[9d225c7d7caa633548706a782111c1c30a3222b3]:
: matthew
: rachel
: raymond
: {'matthew': 'blue'}

#+BEGIN_NOTES
Use the second version when you need to modify the dictionary in the loop.
#+END_NOTES

** Python 2 note
In Python 2, ~dict.keys()~ returned a copy of the dictionary keys. In Python 3
it returns an iterator so ~list~ must be used to create the copy. You should
never try to modify the collection that you are iterating over.
#+BEGIN_QUOTE
If you mutate something while you're iterating over it, you're living in a
state of sin and deserve whatever happens to you.
#+END_QUOTE

* Looping over dictionary keys and values
#+BEGIN_SRC python :results output :exports both :cache yes
  d = {'matthew': 'blue', 'rachel': 'green', 'raymond': 'red'}

  for k in d:
      print(k, '--->', d[k])
#+END_SRC

#+RESULTS[ef25081bd9f523bfd97bcd1ebb2c0d6a72168e7c]:
: matthew ---> blue
: rachel ---> green
: raymond ---> red

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  d = {'matthew': 'blue', 'rachel': 'green', 'raymond': 'red'}

  for k, v in d.items():
      print(k, '--->', v)
#+END_SRC

#+RESULTS[bb4925f717d14d8ef10bb0bdfad745ec8b0bc943]:
: matthew ---> blue
: rachel ---> green
: raymond ---> red

#+BEGIN_NOTES
The first solution has to rehash and do a lookup on every iteration. This way
produces an iterator which is quicker.
#+END_NOTES

** Python 2 note
In Python 2, ~dict.items()~ creates a list in memory and ~dict.iteritems()~
exists which is equivalent to Python 3 ~dict.items()~.

* Construct a dictionary from pairs
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew']
  colors = ['red', 'green', 'blue']

  d = dict(zip(names, colors))
  print(d)
#+END_SRC

#+RESULTS[6347e604abaeea7cf7b2e5629c357dcf76169dd1]:
: {'raymond': 'red', 'rachel': 'green', 'matthew': 'blue'}

* Counting with dictionaries
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'red', 'blue', 'green', 'red']

  d = {}
  for color in colors:
      if color not in d:
          d[color] = 0
      d[color] += 1

  print(d)
#+END_SRC

#+RESULTS[25459b41c262c5be74ab64413ac9f2852f718b43]:
: {'red': 3, 'green': 2, 'blue': 1}

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  colors = ['red', 'green', 'red', 'blue', 'green', 'red']

  d = {}
  for color in colors:
      d[color] = d.get(color, 0) + 1

  print(d)
#+END_SRC

#+RESULTS[ae71c0a9a3020750b2a9c458ab9ffa87981433f6]:
: {'red': 3, 'green': 2, 'blue': 1}

#+REVEAL: split

Another solution uses ~collections.defaultdict~. This does have several
caveats and is better for advanced users who understand the intricacies.

#+BEGIN_SRC python :results output :exports both :cache yes
  import collections
  colors = ['red', 'green', 'red', 'blue', 'green', 'red']

  d = collections.defaultdict(int)
  for color in colors:
      d[color] += 1

  print(d)
#+END_SRC

#+RESULTS[87711fe0b683cfd8c971115f7c78446712818749]:
: defaultdict(<class 'int'>, {'red': 3, 'green': 2, 'blue': 1})

* Grouping with dictionaries
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  # group by name length
  d = {}
  for name in names:
      key = len(name)
      if key not in d:
          d[key] = []
      d[key].append(name)

  print(d)
#+END_SRC

#+RESULTS[a8bb0ade7d635529fc6307ef77a725d6b9df86d7]:
: {7: ['raymond', 'matthew', 'melissa', 'charlie'], 6: ['rachel', 'judith'], 5: ['roger', 'betty']}

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  d = {}
  for name in names:
      key = len(name)
      d.setdefault(key, []).append(name)

  print(d)
#+END_SRC

#+RESULTS[3cdb87630c79004119c109be57a83485531212c8]:
: {7: ['raymond', 'matthew', 'melissa', 'charlie'], 6: ['rachel', 'judith'], 5: ['roger', 'betty']}

#+REVEAL: split

Again with ~defaultdict~...

#+BEGIN_SRC python :results output :exports both :cache yes
  import collections
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  d = collections.defaultdict(list)
  for name in names:
      key = len(name)
      d[key].append(name)

  print(d)
#+END_SRC

#+RESULTS[fdbc7034152be76e2226a48824090c532fa7a4dc]:
: defaultdict(<class 'list'>, {7: ['raymond', 'matthew', 'melissa', 'charlie'], 6: ['rachel', 'judith'], 5: ['roger', 'betty']})

* Pop items from dictionary atomically
#+BEGIN_SRC python :results output :exports both :cache yes
  d = {'matthew': 'blue', 'rachel': 'green', 'raymond': 'red'}

  while d:
      key, value = d.popitem()
      print(key, '-->', value)

  print(d)
#+END_SRC

#+RESULTS[201de6d395d8f384d150b56beb06b97481389d26]:
: raymond --> red
: rachel --> green
: matthew --> blue
: {}

~dict.popitem()~ is atomic so you don't have to put locks around it to use it
in threads.

* Linking dictionaries
#+BEGIN_NOTES
This common approach allows you to use defaults at first, then override with
environment variables and then finally with command line
arguments. Unfortunately, this copies data like crazy.
#+END_NOTES

#+BEGIN_SRC python :results output :exports both :cache yes
  import os, argparse

  defaults = {'color': 'red', 'user': 'guest'}
  parser = argparse.ArgumentParser()
  parser.add_argument('-u', '--user')
  parser.add_argument('-c', '--color')
  namespace = parser.parse_args([])
  command_line_args = {k:v for k, v in vars(namespace).items() if v}

  d = defaults.copy()
  d.update(os.environ)
  d.update(command_line_args)

  print(d)
#+END_SRC

#+RESULTS[7a4772507fda3f7ef88a00501c6cc8b1bb44d261]:
: {'color': 'red', 'user': 'guest', 'CLUTTER_IM_MODULE': 'xim', 'HTTP_PROXY': 'http://10.0.2.2:3128/', 'XDG_MENU_PREFIX': 'gnome-', '_': '/home/vagrant/venvs/risk-wall/bin/python', 'LANG': 'en_GB.UTF-8', 'DISPLAY': ':0', 'WORKON_HOME': '/home/vagrant/venvs', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'USERNAME': 'vagrant', 'XDG_VTNR': '1', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '1961', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'VIRTUAL_ENV': '/home/vagrant/venvs/risk-wall', 'XDG_SESSION_ID': '1', 'USER': 'vagrant', 'DESKTOP_SESSION': 'ubuntu', 'QT4_IM_MODULE': 'xim', 'TEXTDOMAINDIR': '/usr/share/locale/', 'WAYLAND_DISPLAY': 'wayland-0', 'FTP_PROXY': '', 'PWD': '/home/vagrant/vmshared/beautiful-python', 'HOME': '/home/vagrant', 'JOURNAL_STREAM': '9:18267', 'TEXTDOMAIN': 'im-config', 'XDG_SESSION_TYPE': 'wayland', 'https_proxy': 'http://10.0.2.2:3128/', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'SSL_CERT_FILE': '/etc/ssl/certs/ca-certificates.crt', 'http_proxy': 'http://10.0.2.2:3128/', 'XDG_SESSION_DESKTOP': 'ubuntu', 'GJS_DEBUG_OUTPUT': 'stderr', 'PROJECT_HOME': '/home/vagrant/vmshared', 'no_proxy': 'localhost,127.0.0.1,10.0.2.2', 'NO_PROXY': 'localhost,127.0.0.1,10.0.2.2', 'IPY_TEST_SIMPLE_PROMPT': '1', 'HTTPS_PROXY': 'http://10.0.2.2:3128/', 'SHELL': '/bin/bash', 'TERM': 'dumb', 'QT_IM_MODULE': 'xim', 'XMODIFIERS': '@im=ibus', 'IM_CONFIG_PHASE': '2', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'GIO_LAUNCHED_DESKTOP_FILE': '/home/vagrant/.local/share/applications/emacs.desktop', 'XDG_SEAT': 'seat0', 'SHLVL': '3', 'LANGUAGE': 'en_GB:en', 'GDMSESSION': 'ubuntu', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'LOGNAME': 'vagrant', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', 'XDG_RUNTIME_DIR': '/run/user/1000', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'PATH': '/home/vagrant/venvs/risk-wall/bin:/home/vagrant/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/shims:/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.pyenv/plugins/pyenv-update/bin:/home/vagrant/.pyenv/plugins/pyenv-installer/bin:/home/vagrant/.pyenv/plugins/pyenv-doctor/bin:/home/vagrant/.pyenv/shims:~/.pyenv/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/shims:/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.pyenv/plugins/pyenv-update/bin:/home/vagrant/.pyenv/plugins/pyenv-installer/bin:/home/vagrant/.pyenv/plugins/pyenv-doctor/bin:/home/vagrant/.pyenv/shims:~/.pyenv/bin:/home/vagrant/bin:/home/vagrant/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'ftp_proxy': '', 'SESSION_MANAGER': 'local/ubuntu-vagrant:@/tmp/.ICE-unix/728,unix/ubuntu-vagrant:/tmp/.ICE-unix/728', 'GTK_IM_MODULE': 'ibus'}

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  import os, argparse
  from collections import ChainMap

  defaults = {'color': 'red', 'user': 'guest'}
  parser = argparse.ArgumentParser()
  parser.add_argument('-u', '--user')
  parser.add_argument('-c', '--color')
  namespace = parser.parse_args([])
  command_line_args = {k:v for k, v in vars(namespace).items() if v}

  d = ChainMap(command_line_args, os.environ, defaults)

  print(dict(d))
#+END_SRC

#+RESULTS[d829b073186c909ea30cdd5b52c13e4f05b4c091]:
: {'WORKON_HOME': '/home/vagrant/venvs', 'SSL_CERT_FILE': '/etc/ssl/certs/ca-certificates.crt', 'XDG_VTNR': '1', 'SHELL': '/bin/bash', 'QT4_IM_MODULE': 'xim', 'HTTPS_PROXY': 'http://10.0.2.2:3128/', 'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'XDG_SESSION_DESKTOP': 'ubuntu', 'XDG_SESSION_TYPE': 'wayland', 'VIRTUAL_ENV': '/home/vagrant/venvs/risk-wall', 'TERM': 'dumb', 'IM_CONFIG_PHASE': '2', 'USERNAME': 'vagrant', 'PWD': '/home/vagrant/vmshared/beautiful-python', 'GTK_IM_MODULE': 'ibus', 'http_proxy': 'http://10.0.2.2:3128/', 'XDG_SEAT': 'seat0', 'user': 'guest', 'GDMSESSION': 'ubuntu', 'TEXTDOMAINDIR': '/usr/share/locale/', 'JOURNAL_STREAM': '9:18267', 'PATH': '/home/vagrant/venvs/risk-wall/bin:/home/vagrant/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/shims:/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.pyenv/plugins/pyenv-update/bin:/home/vagrant/.pyenv/plugins/pyenv-installer/bin:/home/vagrant/.pyenv/plugins/pyenv-doctor/bin:/home/vagrant/.pyenv/shims:~/.pyenv/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/shims:/home/vagrant/.pyenv/libexec:/home/vagrant/.pyenv/plugins/python-build/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenvwrapper/bin:/home/vagrant/.pyenv/plugins/pyenv-virtualenv/bin:/home/vagrant/.pyenv/plugins/pyenv-update/bin:/home/vagrant/.pyenv/plugins/pyenv-installer/bin:/home/vagrant/.pyenv/plugins/pyenv-doctor/bin:/home/vagrant/.pyenv/shims:~/.pyenv/bin:/home/vagrant/bin:/home/vagrant/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'no_proxy': 'localhost,127.0.0.1,10.0.2.2', 'DESKTOP_SESSION': 'ubuntu', 'LANGUAGE': 'en_GB:en', 'color': 'red', 'FTP_PROXY': '', 'XDG_SESSION_ID': '1', 'ftp_proxy': '', 'USER': 'vagrant', 'XDG_MENU_PREFIX': 'gnome-', 'WAYLAND_DISPLAY': 'wayland-0', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'XDG_RUNTIME_DIR': '/run/user/1000', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'GJS_DEBUG_OUTPUT': 'stderr', 'DISPLAY': ':0', 'SHLVL': '3', 'SESSION_MANAGER': 'local/ubuntu-vagrant:@/tmp/.ICE-unix/728,unix/ubuntu-vagrant:/tmp/.ICE-unix/728', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'NO_PROXY': 'localhost,127.0.0.1,10.0.2.2', 'GIO_LAUNCHED_DESKTOP_FILE_PID': '1961', 'SSH_AUTH_SOCK': '/run/user/1000/keyring/ssh', 'QT_IM_MODULE': 'xim', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1000/bus', '_': '/home/vagrant/venvs/risk-wall/bin/python', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'LOGNAME': 'vagrant', 'IPY_TEST_SIMPLE_PROMPT': '1', 'CLUTTER_IM_MODULE': 'xim', 'HTTP_PROXY': 'http://10.0.2.2:3128/', 'https_proxy': 'http://10.0.2.2:3128/', 'GIO_LAUNCHED_DESKTOP_FILE': '/home/vagrant/.local/share/applications/emacs.desktop', 'PROJECT_HOME': '/home/vagrant/vmshared', 'TEXTDOMAIN': 'im-config', 'XMODIFIERS': '@im=ibus', 'LANG': 'en_GB.UTF-8', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'HOME': '/home/vagrant'}

** Python 2 note
~ChainMap~ was introduced in Python 3.3. There is a package on pypi for
earlier versions of Python.

* Improving clarity
#+BEGIN_NOTES
Positional arguments and indices work, but keyword arguments and names are
better. The first way is convenient for the computer, but the second
corresponds to how humans think
#+END_NOTES

** Clarify function calls with keyword arguments
#+BEGIN_SRC python
  twitter_search = lambda *args: False
  twitter_search('@obama', False, 20, True)
#+END_SRC

*** Better
#+BEGIN_SRC python
  twitter_search = lambda *args, **kwargs: False
  twitter_search('@obama', retweets=False,
                 numtweets=20, popular=True)
#+END_SRC

This is slightly slower but is worth it for the code clarity and developer
time savings.

** Clarify multiple return values with named tuples
#+BEGIN_SRC python :results output :exports both :cache yes
  def test():
      return (0, 4)

  print(test())
#+END_SRC

#+RESULTS[d57024f67ec03e7638b454223820524892af926e]:
: (0, 4)

Is this rest result good or bad? It's not clear.

*** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  from collections import namedtuple

  TestResult = namedtuple("TestResult", ["failed", "attempted"])

  def test():
      return TestResult(failed=0, attempted=4)

  print(test())
#+END_SRC

#+RESULTS[01c210300e933e4c4db024e56f068ad6b0033c3f]:
: TestResult(failed=0, attempted=4)

* Unpacking sequences
#+BEGIN_SRC python :results output :exports both :cache yes
  p = 'Raymond', 'Hettinger', 0x30, 'python@example.com'

  fname = p[0]
  lname = p[1]
  age = p[2]
  email = p[3]

  print(fname, lname, age, email)
#+END_SRC

#+RESULTS[06ec3a21176ffb2d1c5976cb992da95a7e60f795]:
: Raymond Hettinger 48 python@example.com

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  p = 'Raymond', 'Hettinger', 0x30, 'python@example.com'

  fname, lname, age, email = p

  print(fname, lname, age, email)
#+END_SRC

#+RESULTS[54933fe9ca1a2b4cf0bbd81feadc0ad1618ddcb2]:
: Raymond Hettinger 48 python@example.com

This is faster and more readable.

* Updating multiple state variables
#+BEGIN_SRC python :results output :exports both :cache yes
  def fibonacci(n):
      x = 0
      y = 1
      for i in range(n):
          print(x)
          t = y
          y = x + y
          x = t
  fibonacci(10)
#+END_SRC

#+RESULTS[accdeac8ac8001b6660afecb544a9f9a5e42e9c7]:
#+begin_example
0
1
1
2
3
5
8
13
21
34
#+end_example

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  def fibonacci(n):
      x, y = 0, 1
      for i in range(n):
          print(x)
          x, y = y, x + y
  fibonacci(10)
#+END_SRC

#+RESULTS[e2bfcdf6685696f3ecc1d065dadaf7664fe656c3]:
#+begin_example
0
1
1
2
3
5
8
13
21
34
#+end_example

#+BEGIN_NOTES
The first approach has several problems:
- ~x~ and ~y~ are state and state should be updated all at once or not at
  all. In between lines the state is mismatched and is a common source of
  errors,
- ordering of statements matters,
- it's too low level.

The second approach is more high level, doesn't risk getting the order wrong
and is fast.
#+END_NOTES

* Simultaneous state updates
#+BEGIN_SRC python :results output
  influence, x, y, dx, dy, t, m = lambda *args: 0, 0, 0, 0, 0, 0, 0

  tmp_x = x + dx * t
  tmp_y = y + dy * t
  tmp_dx = influence(m, x, y, dx, dy, 'x')
  tmp_dy = influence(m, x, y, dx, dy, 'y')
  x = tmp_x
  y = tmp_y
  dx = tmp_dx
  dy = tmp_dy
#+END_SRC

** Better
#+BEGIN_SRC python :results output
  influence, x, y, dx, dy, t, m = lambda *args: 0, 0, 0, 0, 0, 0, 0

  x, y, dx, dy = (x + dx * t,
                  y + dy * t,
                  influence(m, x, y, dx, dy, 'x'),
                  influence(m, x, y, dx, dy, 'y'))
#+END_SRC

* Efficiency
Don't move data around unnecessarily. It takes only a little care to avoid
quadratic behaviour in many cases.

** Concatenating strings
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  s = names[0]
  for name in names[1:]:
      s += ', ' + name
  print(s)
#+END_SRC

#+RESULTS[0ab4f9e69a56e407e7fe50fda283522ce82a8921]:
: raymond, rachel, matthew, roger, betty, melissa, judith, charlie

*** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  print(', '.join(names))
#+END_SRC

#+RESULTS[a8698625e30425d99e350421105770f637428fe2]:
: raymond, rachel, matthew, roger, betty, melissa, judith, charlie

** Updating sequences
#+BEGIN_SRC python :results output :exports both :cache yes
  names = ['raymond', 'rachel', 'matthew', 'roger',
           'betty', 'melissa', 'judith', 'charlie']

  del names[0]
  names.pop(0)
  names.insert(0, 'mark')

  print(names)
#+END_SRC

#+RESULTS[779781452fe29a7ec4dcb40709019855b9d0ea99]:
: ['mark', 'matthew', 'roger', 'betty', 'melissa', 'judith', 'charlie']

*** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  from collections import deque

  names = deque(['raymond', 'rachel', 'matthew', 'roger',
                 'betty', 'melissa', 'judith', 'charlie'])

  del names[0]
  names.popleft()
  names.appendleft('mark')

  print(list(names))
#+END_SRC

#+RESULTS[4d241585e8bb12b70ca1d8e73827d525609fbdf2]:
: ['mark', 'matthew', 'roger', 'betty', 'melissa', 'judith', 'charlie']

* Using decorators to factor out administrative logic
#+BEGIN_SRC python :results output
  def web_lookup(url, saved={}):
      if url in saved:
          return saved[url]
      page = urllib.urlopen(url).read()
      saved[url] = page
      return page
#+END_SRC

** Better
#+BEGIN_SRC python :results output
  import functools

  @functools.lru_cache(maxsize=128)
  def web_lookup(url):
      return urllib.urlopen(url).read()
#+END_SRC

* Factor out temporary contexts
#+BEGIN_SRC python :results output :exports both :cache yes
  from decimal import Decimal, getcontext, setcontext

  old_context = getcontext().copy()
  getcontext().prec = 50
  print(Decimal(355)/Decimal(113))
  setcontext(old_context)
#+END_SRC

#+RESULTS[5d974b2cec2851cee2e9776da8b34d14c6a8d3d4]:
: 3.1415929203539823008849557522123893805309734513274

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  from decimal import Decimal, Context, localcontext

  with localcontext(Context(prec=50)):
      print(Decimal(355)/Decimal(113))
#+END_SRC

#+RESULTS[d56ae8ef930e7ecfb083c26feb61a52f7b9c8b57]:
: 3.1415929203539823008849557522123893805309734513274

* Opening and closing files
#+BEGIN_SRC python :results output :exports both :cache yes
  f = open('README.org')
  try:
      firstline = next(f)
  finally:
      f.close()

  print(firstline)
#+END_SRC

#+RESULTS[18ac74fe30c7313bc7271fde9de7cb2745111907]:
: #+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
: 

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  with open("README.org") as f:
      firstline = next(f)

  print(firstline)
#+END_SRC

#+RESULTS[c2c9a362de23488af96dbf95a12f309d9017e34e]:
: #+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
: 

* Using locks
#+BEGIN_SRC python :results output
  import threading

  lock = threading.Lock()

  lock.acquire()
  try:
      print('Critical section 1')
      print('Critical section 2')
  finally:
      lock.release()
#+END_SRC

** Better
#+BEGIN_SRC python :results output
  import threading

  lock = threading.Lock()

  with lock:
      print('Critical section 1')
      print('Critical section 2')
#+END_SRC

* Custom context managers

** Ignoring exceptions
#+BEGIN_SRC python :results output
  import os
  try:
      os.remove('somefile.tmp')
  except OSError:
      pass
#+END_SRC

*** Better
#+BEGIN_SRC python :results output
  import os
  from contextlib import suppress
  with suppress(OSError):
      os.remove('somefile.tmp')
#+END_SRC

~contextlib.suppress~ is included in Python 3.4 and later. In earlier versions
it can be implemented as:
#+BEGIN_SRC python
  from contextlib import contextmanager
  @contextmanager
  def suppress(*exceptions):
      try:
          yield
      except exceptions:
          pass
#+END_SRC

** Output redirection
#+BEGIN_SRC python :results output
  import sys
  with open('help.txt', 'w') as f:
      oldstdout = sys.stdout
      sys.stdout = f
      try:
          help(pow)
      finally:
          sys.stdout = oldstdout
#+END_SRC

*** Better
#+BEGIN_SRC python :results output
  from contextlib import redirect_stdout
  with open('help.txt', 'w') as f:
      with redirect_stdout(f):
          help(pow)
#+END_SRC

~contextlib.redirect_stdout~ is included since Python 3.4. In earlier versions
use:
#+BEGIN_SRC python :results output
  import sys
  from contextlib import contextmanager
  @contextmanager
  def redirect_stdout(fileobj):
      oldstdout = sys.stdout
      sys.stdout = fileobj
      try:
          yield fileobj
      finally:
          sys.stdout = oldstdout
#+END_SRC

* Concise, expressive one-liners
Don't try to put too much on one line, but try not to break atoms of thought
into subatomic particles. One logical line of code equals one sentence in
English.
#+BEGIN_SRC python :results output :exports both :cache yes
  result = []
  for i in range(10):
      s = i ** 2
      result.append(s)
  print(sum(result))
#+END_SRC

#+RESULTS[72765012115bc53626895471a38c4a8a1955ebfd]:
: 285

** Better
#+BEGIN_SRC python :results output :exports both :cache yes
  print(sum(i**2 for i in range(10)))
#+END_SRC

#+RESULTS[b702ac13ea1b513c64ed454461a8f8ae1ea69cda]:
: 285

The first way tells you what to do, the second way tells you what you want.

* Class properties
#+BEGIN_SRC python :results output
  class Widget():
      def __init__(self, width, position):
          self.width = width
          self.position = position

  w = Widget(1000, 200)
  print(w.width, w.position)
#+END_SRC

#+RESULTS:
: 1000 200

** Getter and setter
#+BEGIN_SRC python :results output
  class Widget():
      def __init__(self, width, position):
          self._width = width
          self._position = position

      def get_width(self):
          return self._width

      def set_width(self, new_width):
          self._width = new_width

      def get_position(self):
          return self._position

      def set_position(self, new_position):
          if new_position < 0:
              self._position = 0
          elif new_position > self._width:
              self._position = self._width
          else:
              self._position = new_position

  w = Widget(1000, 200)
  w.set_position(1200)
  print(w.get_width(), w.get_position())
#+END_SRC

#+RESULTS:
: 1000 1000

** Better
#+BEGIN_SRC python :results output
  class Widget():
      def __init__(self, width, position):
          self.width = width
          self.position = position

      @property
      def position(self):
          return self._position

      @position.setter
      def position(self, new_position):
          if new_position < 0:
              self._position = 0
          elif new_position > self.width:
              self._position = self.width
          else:
              self._position = new_position

  w = Widget(1000, 1200)
  print(w.width, w.position)
#+END_SRC

#+RESULTS:
: 1000 1000

* End
